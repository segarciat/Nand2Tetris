// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static int ERR_NEG_LEN;
    static int ERR_IDX_OUT_BOUND;
    static int ERR_STR_FULL;
    static int ERR_STR_EMPTY;
    static int ERR_INSF_CAPACITY;
    field Array arr;
    field int len;
    field int maxLen;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let ERR_NEG_LEN = 14;
        let ERR_IDX_OUT_BOUND = 15;
        let ERR_STR_FULL = 17;
        let ERR_STR_EMPTY = 18;
        let ERR_INSF_CAPACITY = 19;
        if (maxLen < 0) {   // 0 capacit strings suported.
            do Sys.error(ERR_NEG_LEN);
        }
        let arr = Array.new(maxLength + 1);
        let maxLen = maxLength;
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < len)) {
            do Sys.error(ERR_IDX_OUT_BOUND);
        }
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < len)) {
            do Sys.error(ERR_IDX_OUT_BOUND + 1);
        }
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = maxLen) {
            do Sys.error(ERR_STR_FULL);
        }
        let arr[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            do Sys.error(ERR_STR_EMPTY);
        }
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int j, sign, v;
        let j = 0;
        if (arr[0] = 45) {  // '-' has ASCII code 45
            let sign = -1;
            let j = j + 1;
        } else {
            let sign = 1;
        }
        let v = 0;
        while((j < len) & (arr[j] > 47) & (arr[j] < 58)) {
            let v = v * 10 + (arr[j] - 48);
            let j = j + 1;
        }
        return sign * v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if (val < 0) {
            let arr[0] = 45;    // '-' in front
            let len = len + 1;
            let val = Math.abs(val);
        }
        do int2str(val);
        return;
    }

    // Assumes non-negative v
    method void int2str(int v) {
        var int c;
        var int lastDigit;
        let lastDigit = v - (10 * (v / 10));
        let c = 48 + lastDigit;
        if (~(v < 10)) {
            do int2str(v / 10);
        }
        
        if (len = maxLen) {
            do Sys.error(ERR_INSF_CAPACITY);
        }
        let arr[len] = c;
        let len = len + 1;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
