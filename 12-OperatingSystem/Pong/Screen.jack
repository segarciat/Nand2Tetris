// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int ERR_PXL_COORD;
    static int ERR_LINE_COORD;
    static int ERR_REC_COORD;
    static int ERR_CIRCLE_COORD;
    static int ERR_CIRCLE_RADIUS;
    static int SCREEN;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int j;
        let ERR_PXL_COORD = 7;
        let ERR_LINE_COORD = 8;
        let ERR_REC_COORD = 9;
        let ERR_CIRCLE_COORD = 12;
        let ERR_CIRCLE_RADIUS = 13;
        let SCREEN = 16384;
        let color = true;   // Defaults to black color.
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let j = 1;
        while(j < 16) {
            let twoToThe[j] = twoToThe[j - 1] + twoToThe[j - 1];
            let j = j + 1;
        }
        return;
    }

    function boolean isLegal(int x, int y) {
        return ((x > -1) | (x < 512) | (y > -1) | (y < 256));
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = SCREEN;
        while(i < 24544) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int j;
        var int val;
        if (~Screen.isLegal(x, y)) {
            do Sys.error(ERR_PXL_COORD);
        }
        // Get 16-bit word that contains the pixel of interest.
        let val = Memory.peek(SCREEN + (y * 32) + (x / 16));

        // Find out which bit we're changing.
        let j = x - (16 * (x / 16));

        // Change the appropriate bit depending on the color.
        if(color) {
            let val = val | twoToThe[j];    // make it black.
        } else {
            let val = val & (~twoToThe[j]); // make it white.
        }
        do Memory.poke(SCREEN + (y * 32) + (x / 16), val);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx, temp;
        var int xDir, yDir;
        if ((~Screen.isLegal(x1, y1)) | (~Screen.isLegal(x2, y2))) {
            do Sys.error(ERR_LINE_COORD);
        }
        let xDir = 1;
        let yDir = 1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 1;
        let b = 1;

        if(dx < 0) {
            let xDir = -1;
            let dx = -dx;
        }

        if(dy < 0) {
            let yDir = -1;
            let dy = -dy;
        }

        // Horizontal line.
        if(dy = 0) {
            while(~(a > dx)) {  // a <= dx
                do Screen.drawPixel(x1 + (xDir*a), y1);
                let a = a + 1;
            }
            return;
        }

        // Vertical line.
        if(dx = 0) {
            while(~(b > dy)) {  // b <= dy
                do Screen.drawPixel(x1, y1 + (yDir*b));
                let b = b + 1;
            }
            return;
        }
        let adyMinusbdx = 0;
        while(~(a > dx) & ~(b > dy)) { // a <= dx and b <= dy
            do Screen.drawPixel(x1 + (xDir*a), y1 + (yDir*b));
            if(adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        if ((~Screen.isLegal(x1, y1)) | (~Screen.isLegal(x2, y2))) {
            do Sys.error(ERR_REC_COORD);
        }
        let y = y1;
        while(~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }
    

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int dx;
        if ((r < 0) | (r > 181)) {
            do Sys.error(ERR_CIRCLE_RADIUS);
        }
        if ((~Screen.isLegal(x-r, y)) | (~Screen.isLegal(x+r, y)) | 
                (~Screen.isLegal(x, y-r)) | (~Screen.isLegal(x, y+r))) {
            do Sys.error(ERR_LINE_COORD);
        }
        let dy = -r;
        while(~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
