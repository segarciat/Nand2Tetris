// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        var int j;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let j = 1;
        while(j < 16) {
            let twoToThe[j] = twoToThe[j - 1] + twoToThe[j - 1];
            let j = j + 1;
        }
        return;
    }

    function int bit(int x, int j) {
        if (twoToThe[j] = (twoToThe[j] & x)) {
            return 1;
        } else {
            return 0;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int j;
        let sum = 0;
        let j = 0;
        while (j < 16) {
            if (~(Math.bit(y, j) = 0)) {
                let sum = sum + x;
            }
            let j = j + 1;
            let x = x + x;  // Shift X by doubling it.
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if (Math.bit(x, 15) = Math.bit(y, 15)) {
            return Math.recDivide(Math.abs(x), Math.abs(y));
        } else {
            return (-1) * Math.recDivide(Math.abs(x), Math.abs(y));
        }
    }

    /** Divides non-negative integers x and  */
    function int recDivide(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math.recDivide(x, y + y);
        if ((x - (2 * q * y)) < y) {
            return (q + q);
        } else {
            return (q + q + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, t, tsq;
        let y = 0;
        let j = 7;  // n / 2 - 1
        while(~(j = (-1))) {
            let t = y + twoToThe[j];
            let tsq = t * t;
            if (~(tsq > x) & tsq > 0) {
                let y = t;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
