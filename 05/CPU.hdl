// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // ----------- Instruction decoding -- 0 for A-instruction, 1 for C-instruction. -----
    DMux(in=true, sel=instruction[15], a=Ain, b=Cin);

    // ----------- Instruction execution - route control bits to proper chips. ------------

    // If A-instruction, load new A. Otherwise, fetch ALU result.
    Mux16(a=ALUout, b=instruction, sel=Ain, out=auxAval);
    
    // If it's a C-instruction, A is loaded if it's d-bit is 1.
    And(a=Cin, b=instruction[5], out=CinLoadA);

    // If it's an A instruction, then there's no "d-bit"; we MUST load A.
    Or(a=Ain, b=CinLoadA, out=loadA);
    ARegister(in=auxAval, load=loadA, out=Aout);

    // If it's a C-instruction, the a-bit 0 means we op on A. We negate it here to make it 1.
    And(a=Cin, b=instruction[12], out=opM);
    Mux16(a=Aout, b=inM, sel=opM, out=AM);

    // If C-instruction, D register may update, according to its d-bit.
    And(a=Cin, b=instruction[4], out=loadD);

    DRegister(in=ALUout, load=loadD, out=Dout);

    // The ALU operates on D and A/M. What do I do with the zr and ng outputs bits?
    ALU(x=Dout, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zr, ng=ng);

    // Use d3 bit to see if we must write to M.
    And(a=Cin, b=instruction[3], out=loadM);

    And16(a=ALUout, b=true, out=outM);
    // addressM is always going to have what A outputs.
    And16(a=true, b=Aout, out[0..14]=addressM);

    And(a=loadM, b=true, out=writeM);

    // ------------------------- Next Instruction Fetching --------------------------------
    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=pos);

    // Only one of ng, zr, or pos is 1. If one matches appropriate j-bit...
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    And(a=pos, b=instruction[0], out=j3);

    // ... then the jump condition is satisfied.
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);

    // If jump condition satisfied and jump condition satisfied.. jump.
    And(a=j123, b=Cin, out=jmp);

    PC(in=Aout, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}