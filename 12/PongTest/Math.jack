// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // 2^j at position j
    static int n;
    static Array twoToThe;
    // Number of bits of a number in Hack.

    /** Initializes the library. */
    function void init() {
        var int j;
        let n = 16;
        let twoToThe = Array.new(n);
        let twoToThe[0] = 1;

        let j = 1;
        while(j < n) {
            let twoToThe[j] = twoToThe[j-1] + twoToThe[j-1];
            let j = j + 1;
        }
        return;
    }

    function boolean bit(int x, int j) {
        var int hasBit;
        let hasBit = (x & twoToThe[j]);
        return ~(hasBit = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } 
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, j, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while(j < n) {
            if(Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if(x < 0) {
            if(y < 0) {
                return Math.recDivide(-x, -y);
            } else {
                return -Math.recDivide(-x, y);
            }
        } else {
            if (y < 0) {
                return -Math.recDivide(x, -y);
            } else {
                return Math.recDivide(x, y);
            }
        }
    }

    // Divides non-negative integers x and y.
    function int recDivide(int x, int y) {
         // Integer part of x/y.
        var int q;
        if((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if((x - (2*q*y)) < y) {
            return (q + q);
        } else {
            return (q + q + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, test, j;
        let y = 0;
        let j = (n/2) - 1;
        while(~(j = -1)) {
            let test = (y + twoToThe[j]) * (y + twoToThe[j]);
            if( ~(test > x) & (test > 0) ) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
