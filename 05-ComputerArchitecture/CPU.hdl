// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decide if it's an A instruction or a C instruction.
    DMux(in=true, sel=instruction[15], a=Ain, b=Cin);

    // Decode control bits if C instruction
    And(a=instruction[15], b=instruction[12], out=opM);
    And(a=Cin, b=instruction[11], out=zx);
    And(a=Cin, b=instruction[10], out=nx);
    And(a=Cin, b=instruction[9], out=zy);
    And(a=Cin, b=instruction[8], out=ny);
    And(a=Cin, b=instruction[7], out=f);
    And(a=Cin, b=instruction[6], out=no);
    And(a=Cin, b=instruction[5], out=destA);
    And(a=Cin, b=instruction[4], out=destD);
    And(a=Cin, b=instruction[3], out=writeM);   // Decide whether outM overwrites contents of M (RAM[A])
    And(a=Cin, b=instruction[2], out=j1);       // jlt
    And(a=Cin, b=instruction[1], out=j2);       // jeq
    And(a=Cin, b=instruction[0], out=j3);       // jgt

    // Conditionally load A register
    Mux16(a=ALUout, b=instruction, sel=Ain, out=Aval);
    Or(a=Ain, b=destA, out=loadA);
    ARegister(in=Aval, load=loadA, out=Aout, out[0..14]=addressM); // * destA?

    // Realize operation with A/M/D registers
    Mux16(a=Aout, b=inM, sel=opM, out=AorM);
    And(a=Cin, b=destD, out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dval);
    ALU(x=Dval, y=AorM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, out=outM, zr=zr, ng=ng);

    // Decide if jump is necessary
    And(a=j1, b=ng, out=jlt);
    And(a=j2, b=zr, out=jeq);
    Or(a=zr, b=ng, out=nonpos);
    Not(in=nonpos, out=pos);
    And(a=pos, b=j3, out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jmp);

    PC(in=Aout, inc=true, load=jmp, reset=reset, out[0..14]=pc);
}